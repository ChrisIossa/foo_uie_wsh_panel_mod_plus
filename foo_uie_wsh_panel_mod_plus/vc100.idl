import "docobj.idl";
import "C:\Program Files\Microsoft SDKs\Windows\v7.0A\include\MLang.idl";


[ version(1.8), uuid(22d2ee22-9725-3ce6-bd44-3ceab327c4ed) ]
library foo_uie_wsh_panel_mod
{
	importlib("stdole2.tlb");
	importlib("olepro32.dll");

	[
		dual,
		object,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(2e0bae19-3afe-473a-a703-0feb2d714655)
	] 
#line 15 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IDisposable : IDispatch {
#line 17 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  Dispose();
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(77e72064-1fb6-4754-a076-1dc517a6787b)
	] 
#line 28 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IGdiObj : IDisposable {
#line 30 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  _ptr([out] void **pp);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(6fa87441-9f53-4a3f-999a-19509e3c92d7)
	] 
#line 42 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IGdiFont : IGdiObj {
#line 44 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  HFont([out,retval] UINT *p);
		[propget] HRESULT  Height([out,retval] UINT *p);
		[propget] HRESULT  Name([defaultvalue(0)] LANGID langId, [out,retval] BSTR *outName);
		[propget] HRESULT  Size([out,retval] float *outSize);
		[propget] HRESULT  Style([out,retval] INT *outStyle);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(22d1f519-5d6e-4d5c-80e3-8fde0d1b946b)
	] 
#line 58 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IGdiRawBitmap : IDisposable {
#line 60 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  _Handle([out] HDC *p);
		[propget] HRESULT  Width([out,retval] UINT *p);
		[propget] HRESULT  Height([out,retval] UINT *p);
	};

#line 82 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
interface IGdiGraphics;
	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(7efbd443-4f6f-4cb2-9eee-882b9b19cbf6)
	] 
#line 73 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IGdiBitmap : IGdiObj {
#line 75 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  Width([out,retval] UINT *p);
		[propget] HRESULT  Height([out,retval] UINT *p);
		HRESULT  Clone([in]float x, [in]float y, [in]float w, [in]float h, [out,retval] IGdiBitmap **pp);
		HRESULT  RotateFlip([range(0, 7)] UINT mode);
		HRESULT  ApplyAlpha([in]BYTE alpha, [out,retval] IGdiBitmap **pp);
		HRESULT  ApplyMask([in]IGdiBitmap *mask, [out,retval] VARIANT_BOOL *p);
		HRESULT  CreateRawBitmap([out,retval] IGdiRawBitmap **pp);
		HRESULT  GetGraphics([out,retval] IGdiGraphics **pp);
		HRESULT  ReleaseGraphics([in]IGdiGraphics *p);
		HRESULT  BoxBlur([range(1, 20)] int radius, [range(1, 20),defaultvalue(1)] int iteration);
		HRESULT  Resize([in]UINT w, [in]UINT h, [range(-1, 7),defaultvalue(0)] INT interpolationMode, [out,retval] IGdiBitmap **pp);
		HRESULT  GetColorScheme([in]UINT count, [out,retval] VARIANT *outArray);
		HRESULT  GetPixel([in]INT x, [in]INT y, [out,retval] INT *p);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(452682d2-feef-4351-b642-e8949435086b)
	] 
#line 98 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IMeasureStringInfo : IDispatch {
		[propget] HRESULT  x([out,retval] float *p);
		[propget] HRESULT  y([out,retval] float *p);
		[propget] HRESULT  width([out,retval] float *p);
		[propget] HRESULT  height([out,retval] float *p);
		[propget] HRESULT  lines([out,retval] int *p);
		[propget] HRESULT  chars([out,retval] int *p);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(9d6e404f-5ba7-4470-88d5-eb5980dffc07)
	] 
#line 115 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IGdiGraphics : IGdiObj {
#line 117 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propput] HRESULT  _ptr([in]void *p);
		HRESULT  FillSolidRect([in]float x, [in]float y, [in]float w, [in]float h, [in]VARIANT color);
		HRESULT  FillGradRect([in]float x, [in]float y, [in]float w, [in]float h, [in]float angle, [in]VARIANT color1, [in]VARIANT color2, [defaultvalue("1.000000")] float focus);
		HRESULT  FillRoundRect([in]float x, [in]float y, [in]float w, [in]float h, [in]float arc_width, [in]float arc_height, [in]VARIANT color);
		HRESULT  FillEllipse([in]float x, [in]float y, [in]float w, [in]float h, [in]VARIANT color);
		HRESULT  FillPolygon([in]VARIANT color, [range(0, 1)] INT fillmode, [in]VARIANT points);
		HRESULT  FillPie([in]float x, [in]float y, [in]float w, [in]float h, [in]float start_angle, [in]float sweep_angle, [in]VARIANT color);
#line 125 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  DrawLine([in]float x1, [in]float y1, [in]float x2, [in]float y2, [in]float line_width, [in]VARIANT color);
		HRESULT  DrawRect([in]float x, [in]float y, [in]float w, [in]float h, [in]float line_width, [in]VARIANT color);
		HRESULT  DrawRoundRect([in]float x, [in]float y, [in]float w, [in]float h, [in]float arc_width, [in]float arc_height, [in]float line_width, [in]VARIANT color);
		HRESULT  DrawEllipse([in]float x, [in]float y, [in]float w, [in]float h, [in]float line_width, [in]VARIANT color);
		HRESULT  DrawPolygon([in]VARIANT color, [in]float line_width, [in]VARIANT points);
		HRESULT  DrawPie([in]float x, [in]float y, [in]float w, [in]float h, [in]float start_angle, [in]float sweep_angle, [in]float line_width, [in]VARIANT color);
#line 132 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  DrawString([in]BSTR str, [in]IGdiFont *font, [in]VARIANT color, [in]float x, [in]float y, [in]float w, [in]float h, [defaultvalue(0)] int flags);
		HRESULT  GdiDrawText([in]BSTR str, [in]IGdiFont *font, [in]VARIANT color, [in]int x, [in]int y, [in]int w, [in]int h, [defaultvalue(0)] int format, [out,retval] VARIANT *p);
		HRESULT  DrawImage([in]IGdiBitmap *image, [in]float dstX, [in]float dstY, [in]float dstW, [in]float dstH, [in]float srcX, [in]float srcY, [in]float srcW, [in]float srcH, [defaultvalue("0.000000")] float angle, [defaultvalue(255)] BYTE alpha);
		HRESULT  GdiDrawBitmap([in]IGdiRawBitmap *bitmap, [in]int dstX, [in]int dstY, [in]int dstW, [in]int dstH, [in]int srcX, [in]int srcY, [in]int srcW, [in]int srcH);
		HRESULT  GdiAlphaBlend([in]IGdiRawBitmap *bitmap, [in]int dstX, [in]int dstY, [in]int dstW, [in]int dstH, [in]int srcX, [in]int srcY, [in]int srcW, [in]int srcH, [defaultvalue(255)] BYTE alpha);
#line 138 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  MeasureString([in]BSTR str, [in]IGdiFont *font, [in]float x, [in]float y, [in]float w, [in]float h, [defaultvalue(0)] int flags, [out,retval] IMeasureStringInfo **pp);
		HRESULT  CalcTextWidth([in]BSTR str, [in]IGdiFont *font, [out,retval] UINT *p);
		HRESULT  CalcTextHeight([in]BSTR str, [in]IGdiFont *font, [out,retval] UINT *p);
		HRESULT  EstimateLineWrap([in]BSTR str, [in]IGdiFont *font, [in]int max_width, [out,retval] VARIANT *p);
		HRESULT  SetTextRenderingHint([range(0, 5)] UINT mode);
		HRESULT  SetSmoothingMode([range(-1, 4)] int mode);
		HRESULT  SetInterpolationMode([range(-1, 7)] int mode);
	};

#line 164 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
interface IStyleTextRender;
#line 168 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
interface IPrivateFontCollection;
	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(351e3e75-8f27-4afd-b7e0-5409cf8f4947)
	] 
#line 159 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IGdiUtils : IDispatch {
#line 161 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  Font([in]BSTR name, [in]float pxSize, [defaultvalue(0)] int style, [out,retval] IGdiFont **pp);
		HRESULT  Image([in]BSTR path, [out,retval] IGdiBitmap **pp);
		HRESULT  CreateImage([in]int w, [in]int h, [out,retval] IGdiBitmap **pp);
		HRESULT  CreateStyleTextRender([defaultvalue(0)] VARIANT_BOOL pngmode, [out,retval] IStyleTextRender **pp);
		HRESULT  LoadImageAsync([in]UINT window_id, [in]BSTR path, [out,retval] UINT *p);
		HRESULT  AddFontResEx([in]BSTR path, [defaultvalue(0)] VARIANT_BOOL fl, [out,retval] UINT *p);
		HRESULT  RemoveFontResEx([in]BSTR path, [defaultvalue(0)] VARIANT_BOOL fl, [out,retval] UINT *p);
		HRESULT  CreatePrivateFontCollection([out,retval] IPrivateFontCollection **pp);
		HRESULT  CloneGraphics([in]IGdiGraphics *g, [in]INT x, [in]INT y, [in]INT w, [in]INT h, [out,retval] IGdiBitmap **pp);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(50e12553-8908-4eca-8801-ead834cea6f0)
	] 
#line 181 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IStyleTextRender : IDisposable {
#line 184 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  OutLineText([in]int text_color, [in]int outline_color, [in]int outline_width);
		HRESULT  DoubleOutLineText([in]int text_color, [in]int outline_color1, [in]int outline_color2, [in]int outline_width1, [in]int outline_width2);
		HRESULT  GlowText([in]int text_color, [in]int glow_color, [in]int glow_width);
#line 188 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  EnableShadow([in]VARIANT_BOOL enable);
		HRESULT  ResetShadow();
		HRESULT  Shadow([in]VARIANT color, [in]int thickness, [in]int offset_x, [in]int offset_y);
		HRESULT  DiffusedShadow([in]VARIANT color, [in]int thickness, [in]int offset_x, [in]int offset_y);
		HRESULT  SetShadowBackgroundColor([in]VARIANT color, [in]int width, [in]int height);
		HRESULT  SetShadowBackgroundImage([in]IGdiBitmap *img);
#line 195 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  RenderStringPoint([in]IGdiGraphics *g, [in]BSTR str, [in]IGdiFont *font, [in]int x, [in]int y, [defaultvalue(0)] int flags, [out,retval] VARIANT_BOOL *p);
		HRESULT  RenderStringRect([in]IGdiGraphics *g, [in]BSTR str, [in]IGdiFont *font, [in]int x, [in]int y, [in]int w, [in]int h, [defaultvalue(0)] int flags, [out,retval] VARIANT_BOOL *p);
#line 198 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  SetPngImage([in]IGdiBitmap *img);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(7c39dcf1-4e41-4a61-b06b-fb52107e4409)
	] 
#line 209 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IFbFileInfo : IDisposable {
#line 211 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  _ptr([out] void **pp);
		[propget] HRESULT  MetaCount([out,retval] UINT *p);
		HRESULT  MetaValueCount([in]UINT idx, [out,retval] UINT *p);
		HRESULT  MetaName([in]UINT idx, [out,retval] BSTR *pp);
		HRESULT  MetaValue([in]UINT idx, [in]UINT vidx, [out,retval] BSTR *pp);
		HRESULT  MetaFind([in]BSTR name, [out,retval] INT *p);
		HRESULT  MetaRemoveField([in]BSTR name);
		HRESULT  MetaAdd([in]BSTR name, [in]BSTR value, [out,retval] UINT *p);
		HRESULT  MetaInsertValue([in]UINT idx, [in]UINT vidx, [in]BSTR value);
		[propget] HRESULT  InfoCount([out,retval] UINT *p);
		HRESULT  InfoName([in]UINT idx, [out,retval] BSTR *pp);
		HRESULT  InfoValue([in]UINT idx, [out,retval] BSTR *pp);
		HRESULT  InfoFind([in]BSTR name, [out,retval] INT *p);
		HRESULT  MetaSet([in]BSTR name, [in]BSTR value);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(0e1980d3-916a-482e-af87-578bcb1a4a25)
	] 
#line 235 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IFbMetadbHandle : IDisposable {
#line 237 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  _ptr([out] void **pp);
		[propget] HRESULT  Path([out,retval] BSTR *pp);
		[propget] HRESULT  RawPath([out,retval] BSTR *pp);
		[propget] HRESULT  SubSong([out,retval] UINT *p);
		[propget] HRESULT  FileSize([out,retval] LONGLONG *p);
		[propget] HRESULT  Length([out,retval] double *p);
		HRESULT  GetFileInfo([defaultvalue(0)] VARIANT_BOOL force, [out,retval] IFbFileInfo **pp);
		HRESULT  UpdateFileInfo([in]IFbFileInfo *fileinfo, [defaultvalue(0)] VARIANT_BOOL force);
		[vararg] HRESULT  UpdateFileInfoSimple([in]SAFEARRAY(VARIANT) p);
		HRESULT  Compare([in]IFbMetadbHandle *handle, [out,retval] VARIANT_BOOL *p);
	};

#line 278 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
interface IFbTitleFormat;
	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(64528708-ae09-49dd-8e8d-1417fe9a9f09)
	] 
#line 256 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IFbMetadbHandleList : IDisposable {
#line 258 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  _ptr([out,retval] void **pp);
		[propget] HRESULT  Item([in]UINT index, [out,retval] IFbMetadbHandle **pp);
		[propput] HRESULT  Item([in]UINT index, [in]IFbMetadbHandle *handle);
		[propget] HRESULT  Count([out,retval] UINT *p);
#line 263 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  Clone([out,retval] IFbMetadbHandleList **pp);
		HRESULT  Insert([in]UINT index, [in]IFbMetadbHandle *handle, [out,retval] UINT *outIndex);
		HRESULT  InsertRange([in]UINT index, [in]IFbMetadbHandleList *handles, [out,retval] UINT *outIndex);
		HRESULT  Add([in]IFbMetadbHandle *handle, [out,retval] UINT *p);
		HRESULT  AddRange([in]IFbMetadbHandleList *handles);
		HRESULT  RemoveById([in]UINT index);
		HRESULT  Remove([in]IFbMetadbHandle *handle);
		HRESULT  RemoveRange([in]UINT from, [in]UINT count);
		HRESULT  RemoveAll();
		HRESULT  Sort();
		HRESULT  Find([in]IFbMetadbHandle *handle, [out,retval] UINT *p);
		HRESULT  BSearch([in]IFbMetadbHandle *handle, [out,retval] UINT *p);
		HRESULT  MakeIntersection([in]IFbMetadbHandleList *handles);
		HRESULT  MakeUnion([in]IFbMetadbHandleList *handles);
		HRESULT  MakeDifference([in]IFbMetadbHandleList *handles);
		HRESULT  OrderByFormat([in]IFbTitleFormat *script, [in]int direction);
		HRESULT  OrderByPath();
		HRESULT  OrderByRelativePath();
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(998d8666-b446-4e92-8e8f-797d3cce4b7e)
	] 
#line 290 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IFbTitleFormat : IDisposable {
#line 292 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  _ptr([out,retval] void **pp);
		HRESULT  Eval([defaultvalue(0)] VARIANT_BOOL force, [defaultvalue(0)] VARIANT_BOOL force_read, [out,retval] BSTR *pp);
		HRESULT  EvalWithMetadb([in]IFbMetadbHandle *handle, [defaultvalue(0)] VARIANT_BOOL force, [out,retval] BSTR *pp);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(1e9f95ae-63be-49dc-a395-ee386e8eb202)
	] 
#line 304 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IMenuObj : IDisposable {
#line 306 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  ID([out,retval] UINT *p);
		HRESULT  AppendMenuItem([in]UINT flags, [in]UINT item_id, [in]BSTR text);
		HRESULT  AppendMenuSeparator();
		HRESULT  EnableMenuItem([in]UINT id_or_pos, [in]UINT enable, [defaultvalue(0)] VARIANT_BOOL bypos);
		HRESULT  CheckMenuItem([in]UINT id_or_pos, [in]VARIANT_BOOL check, [defaultvalue(0)] VARIANT_BOOL bypos);
		HRESULT  CheckMenuRadioItem([in]UINT first, [in]UINT last, [in]UINT check, [defaultvalue(0)] VARIANT_BOOL bypos);
		HRESULT  TrackPopupMenu([in]int x, [in]int y, [defaultvalue(0)] UINT flags, [out,retval] UINT *item_id);
		HRESULT  AppendTo([in]IMenuObj *parent, [in]UINT flags, [in]BSTR text);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(0e1bc833-b9f8-44b1-8240-57fff04602ad)
	] 
#line 323 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IContextMenuManager : IDisposable {
#line 325 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  InitContext([in]VARIANT handles);
		HRESULT  InitNowPlaying();
		HRESULT  BuildMenu([in]IMenuObj *p, [in]int base_id, [in]int max_id);
		HRESULT  ExecuteByID([in]UINT id, [out,retval] VARIANT_BOOL *p);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(4a357221-1b75-4379-8de7-6a865bbfad10)
	] 
#line 338 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IMainMenuManager : IDisposable {
#line 340 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  Init([in]BSTR root_name);
		HRESULT  BuildMenu([in]IMenuObj *p, [in]int base_id, [in]int count);
		HRESULT  ExecuteByID([in]UINT id, [out,retval] VARIANT_BOOL *p);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(2d7436ad-6527-4154-a3c7-361ab8b88f5c)
	] 
#line 352 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IFbProfiler : IDispatch {
#line 354 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  Reset();
		HRESULT  Print();
		[propget] HRESULT  Time([out,retval] INT *p);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(1f40f9e1-c0fb-4021-80de-37c4d0a26f45)
	] 
#line 366 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IFbUiSelectionHolder : IDisposable {
#line 368 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  SetSelection([in]IFbMetadbHandleList *handles);
		HRESULT  SetPlaylistSelectionTracking();
		HRESULT  SetPlaylistTracking();
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(bae2e084-6545-4a17-9795-1496a4ee2741)
	] 
#line 381 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IFbUtils : IDispatch {
#line 383 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[vararg] HRESULT  trace([in]SAFEARRAY(VARIANT) p);
		HRESULT  ShowPopupMessage([in]BSTR msg, [defaultvalue("WSH Panel Mod Plus")] BSTR title, [defaultvalue(0),range(0, 2)] int iconid);
		HRESULT  CreateProfiler([defaultvalue("")] BSTR name, [out,retval] IFbProfiler **pp);
		HRESULT  TitleFormat([in]BSTR expression, [out,retval] IFbTitleFormat **pp);
		HRESULT  GetNowPlaying([out,retval] IFbMetadbHandle **pp);
		HRESULT  GetFocusItem([defaultvalue(-1)] VARIANT_BOOL force, [out,retval] IFbMetadbHandle **pp);
		HRESULT  GetSelection([out,retval] IFbMetadbHandle **pp);
		HRESULT  GetSelections([defaultvalue(0)] UINT flags, [out,retval] IFbMetadbHandleList **pp);
		HRESULT  GetSelectionType([out,retval] UINT *p);
		HRESULT  AcquireUiSelectionHolder([out,retval] IFbUiSelectionHolder **outHolder);
#line 394 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  ComponentPath([out,retval] BSTR *pp);
		[propget] HRESULT  FoobarPath([out,retval] BSTR *pp);
		[propget] HRESULT  ProfilePath([out,retval] BSTR *pp);
		[propget] HRESULT  IsPlaying([out,retval] VARIANT_BOOL *p);
		[propget] HRESULT  IsPaused([out,retval] VARIANT_BOOL *p);
		[propget] HRESULT  PlaybackTime([out,retval] double *p);
		[propput] HRESULT  PlaybackTime([in]double time);
		[propget] HRESULT  PlaybackLength([out,retval] double *p);
		[propget] HRESULT  PlaybackOrder([out,retval] UINT *p);
		[propput] HRESULT  PlaybackOrder([in]UINT order);
		[propget] HRESULT  StopAfterCurrent([out,retval] VARIANT_BOOL *p);
		[propput] HRESULT  StopAfterCurrent([in]VARIANT_BOOL p);
		[propget] HRESULT  CursorFollowPlayback([out,retval] VARIANT_BOOL *p);
		[propput] HRESULT  CursorFollowPlayback([in]VARIANT_BOOL p);
		[propget] HRESULT  PlaybackFollowCursor([out,retval] VARIANT_BOOL *p);
		[propput] HRESULT  PlaybackFollowCursor([in]VARIANT_BOOL p);
		[propget] HRESULT  Volume([out,retval] float *p);
		[propput] HRESULT  Volume([in]float value);
#line 413 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  Exit();
		HRESULT  Play();
		HRESULT  Stop();
		HRESULT  Pause();
		HRESULT  PlayOrPause();
		HRESULT  Next();
		HRESULT  Prev();
		HRESULT  Random();
		HRESULT  VolumeDown();
		HRESULT  VolumeUp();
		HRESULT  VolumeMute();
		HRESULT  AddDirectory();
		HRESULT  AddFiles();
		HRESULT  ShowConsole();
		HRESULT  ShowPreferences([defaultvalue("")] BSTR guid_str);
		HRESULT  ClearPlaylist();
		HRESULT  LoadPlaylist();
		HRESULT  LoadPlaylistV2([in]BSTR path, [out,retval] VARIANT_BOOL *p);
		HRESULT  SavePlaylist();
		HRESULT  SavePlaylistV2([in]BSTR path, [in]IFbMetadbHandleList *handles, [defaultvalue(0)] VARIANT_BOOL overwrite, [out,retval] VARIANT_BOOL *p);
		HRESULT  RunMainMenuCommand([in]BSTR command, [out,retval] VARIANT_BOOL *p);
		HRESULT  RunContextCommand([in]BSTR command, [defaultvalue(0)] UINT flags, [out,retval] VARIANT_BOOL *p);
		HRESULT  RunContextCommandWithMetadb([in]BSTR command, [in]VARIANT handle, [defaultvalue(0)] UINT flags, [out,retval] VARIANT_BOOL *p);
		HRESULT  CreateContextMenuManager([out,retval] IContextMenuManager **pp);
		HRESULT  CreateMainMenuManager([out,retval] IMainMenuManager **pp);
		HRESULT  IsMetadbInMediaLibrary([in]IFbMetadbHandle *handle, [out,retval] VARIANT_BOOL *p);
#line 440 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  ActivePlaylist([out,retval] UINT *p);
		[propput] HRESULT  ActivePlaylist([in]UINT idx);
		[propget] HRESULT  PlayingPlaylist([out,retval] UINT *p);
		[propput] HRESULT  PlayingPlaylist([in]UINT idx);
		[propget] HRESULT  PlaylistCount([out,retval] UINT *p);
		[propget] HRESULT  PlaylistItemCount([in]UINT idx, [out,retval] UINT *p);
		HRESULT  GetPlaylistName([in]UINT idx, [out,retval] BSTR *p);
		HRESULT  CreatePlaylist([in]UINT idx, [in]BSTR name, [out,retval] UINT *p);
		HRESULT  RemovePlaylist([in]UINT idx, [out,retval] VARIANT_BOOL *p);
		HRESULT  MovePlaylist([in]UINT from, [in]UINT to, [out,retval] VARIANT_BOOL *p);
		HRESULT  RenamePlaylist([in]UINT idx, [in]BSTR name, [out,retval] VARIANT_BOOL *p);
		HRESULT  DuplicatePlaylist([in]UINT from, [defaultvalue("")] BSTR name, [out,retval] UINT *p);
		HRESULT  IsAutoPlaylist([in]UINT idx, [out,retval] VARIANT_BOOL *p);
		HRESULT  CreateAutoPlaylist([in]UINT idx, [in]BSTR name, [in]BSTR query, [defaultvalue("")] BSTR sort, [defaultvalue(0)] UINT flags, [out,retval] UINT *p);
		HRESULT  ShowAutoPlaylistUI([in]UINT idx, [out,retval] VARIANT_BOOL *p);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(c74bdea4-4587-45c2-b0a7-91fae0cdf1a4)
	] 
#line 466 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface ITimerObj : IDisposable {
#line 468 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  ID([out,retval] UINT *p);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(8a14d6a2-4582-4398-a6af-2206f2dabbbe)
	] 
#line 479 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IThemeManager : IDisposable {
#line 481 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  SetPartAndStateID([in]int partid, [in]int stateid);
		HRESULT  IsThemePartDefined([in]int partid, [defaultvalue(0)] int stateid, [out,retval] VARIANT_BOOL *p);
		HRESULT  DrawThemeBackground([in]IGdiGraphics *gr, [in]int x, [in]int y, [in]int w, [in]int h, [defaultvalue(0)] int clip_x, [defaultvalue(0)] int clip_y, [defaultvalue(0)] int clip_w, [defaultvalue(0)] int clip_h);
#line 485 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  DrawThemeTextEx([in]IGdiGraphics *gr, [in]BSTR text, [in]int color, [in]int x, [in]int y, [in]int w, [in]int h, [defaultvalue(5)] int glow_size, [defaultvalue(0)] int format);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(91830eda-b5f2-4061-9923-7880192a2734)
	] 
#line 495 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IDropSourceAction : IDisposable {
#line 497 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  Parsable([out,retval] VARIANT_BOOL *parsable);
		[propput] HRESULT  Parsable([in]VARIANT_BOOL parsable);
#line 500 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  Playlist([out,retval] int *id);
		[propput] HRESULT  Playlist([in]int id);
		[propget] HRESULT  ToSelect([out,retval] VARIANT_BOOL *to_select);
		[propput] HRESULT  ToSelect([in]VARIANT_BOOL to_select);
#line 505 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  ToPlaylist();
	};

#line 546 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
interface IFbTooltip;
	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(81e1f0c0-1dfe-4996-abd9-ba98dff69e4c)
	] 
#line 515 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IFbWindow : IDispatch {
#line 517 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		[propget] HRESULT  ID([out,retval] UINT *p);
		[propget] HRESULT  Width([out,retval] INT *p);
		[propget] HRESULT  Height([out,retval] INT *p);
		[propget] HRESULT  InstanceType([out,retval] UINT *p);
		[propget] HRESULT  MaxWidth([out,retval] UINT *p);
		[propput] HRESULT  MaxWidth([in]UINT width);
		[propget] HRESULT  MaxHeight([out,retval] UINT *p);
		[propput] HRESULT  MaxHeight([in]UINT height);
		[propget] HRESULT  MinWidth([out,retval] UINT *p);
		[propput] HRESULT  MinWidth([in]UINT width);
		[propget] HRESULT  MinHeight([out,retval] UINT *p);
		[propput] HRESULT  MinHeight([in]UINT height);
		[propget] HRESULT  DlgCode([out,retval] UINT *p);
		[propput] HRESULT  DlgCode([in]UINT code);
		[propget] HRESULT  IsTransparent([out,retval] VARIANT_BOOL *p);
		[propget] HRESULT  IsVisible([out,retval] VARIANT_BOOL *p);
		HRESULT  Repaint([defaultvalue(0)] VARIANT_BOOL force);
		HRESULT  RepaintRect([in]UINT x, [in]UINT y, [in]UINT w, [in]UINT h, [defaultvalue(0)] VARIANT_BOOL force);
		HRESULT  CreatePopupMenu([out,retval] IMenuObj **pp);
		HRESULT  CreateTimerTimeout([in]UINT timeout, [out,retval] ITimerObj **pp);
		HRESULT  CreateTimerInterval([in]UINT delay, [out,retval] ITimerObj **pp);
		HRESULT  KillTimer([in]ITimerObj *p);
		HRESULT  SetInterval([in]IDispatch *func, [in]INT delay, [out,retval] UINT *outIntervalID);
		HRESULT  ClearInterval([in]UINT intervalID);
		HRESULT  SetTimeout([in]IDispatch *func, [in]INT delay, [out,retval] UINT *outTimeoutID);
		HRESULT  ClearTimeout([in]UINT timeoutID);
		HRESULT  NotifyOthers([in]BSTR name, [in]VARIANT info);
		HRESULT  WatchMetadb([in]IFbMetadbHandle *handle);
		HRESULT  UnWatchMetadb();
		HRESULT  CreateTooltip([out,retval] IFbTooltip **pp);
		HRESULT  ShowConfigure();
		HRESULT  ShowProperties();
		HRESULT  GetProperty([in]BSTR name, [optional] VARIANT defaultval, [out,retval] VARIANT *p);
		HRESULT  SetProperty([in]BSTR name, [in]VARIANT val);
		HRESULT  GetBackgroundImage([out,retval] IGdiBitmap **pp);
		HRESULT  SetCursor([in]UINT id);
		HRESULT  GetColorCUI([in]UINT type, [defaultvalue("")] BSTR guidstr, [out,retval] int *p);
		HRESULT  GetFontCUI([in]UINT type, [defaultvalue("")] BSTR guidstr, [out,retval] IGdiFont **pp);
		HRESULT  GetColorDUI([in]UINT type, [out,retval] int *p);
		HRESULT  GetFontDUI([in]UINT type, [out,retval] IGdiFont **pp);
		HRESULT  CreateThemeManager([in]BSTR classid, [out,retval] IThemeManager **pp);
	};

#line 595 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
interface IWindow;
#line 608 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
interface IHttpRequest;
	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(d53e81cd-0157-4cfe-a618-1F88d48dc0b7)
	] 
#line 575 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IWSHUtils : IDispatch {
#line 577 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  CheckComponent([in]BSTR name, [defaultvalue(-1)] VARIANT_BOOL is_dll, [out,retval] VARIANT_BOOL *p);
		HRESULT  CheckFont([in]BSTR name, [out,retval] VARIANT_BOOL *p);
		HRESULT  GetAlbumArt([in]BSTR rawpath, [defaultvalue(0)] int art_id, [defaultvalue(-1)] VARIANT_BOOL need_stub, [out,retval] IGdiBitmap **pp);
		HRESULT  GetAlbumArtV2([in]IFbMetadbHandle *handle, [defaultvalue(0)] int art_id, [defaultvalue(-1)] VARIANT_BOOL need_stub, [out,retval] IGdiBitmap **pp);
		HRESULT  GetAlbumArtV3([in]IFbMetadbHandle *handle, [in]BSTR pattern, [defaultvalue(0)] int art_id, [defaultvalue(-1)] VARIANT_BOOL need_stub, [defaultvalue(-1)] VARIANT_BOOL load_embed, [defaultvalue(-1)] VARIANT_BOOL use_fallback, [out,retval] IGdiBitmap **pp);
		HRESULT  GetAlbumArtEmbedded([in]BSTR rawpath, [defaultvalue(0)] int art_id, [out,retval] IGdiBitmap **pp);
		HRESULT  GetAlbumArtAsync([in]UINT window_id, [in]IFbMetadbHandle *handle, [defaultvalue(0)] int art_id, [defaultvalue(-1)] VARIANT_BOOL need_stub, [defaultvalue(0)] VARIANT_BOOL only_embed, [defaultvalue(0)] VARIANT_BOOL no_load, [out,retval] UINT *p);
		HRESULT  ReadINI([in]BSTR filename, [in]BSTR section, [in]BSTR key, [optional] VARIANT defaultval, [out,retval] BSTR *pp);
		HRESULT  WriteINI([in]BSTR filename, [in]BSTR section, [in]BSTR key, [in]VARIANT val, [out,retval] VARIANT_BOOL *p);
		HRESULT  IsKeyPressed([in]UINT vkey, [out,retval] VARIANT_BOOL *p);
		HRESULT  PathWildcardMatch([in]BSTR pattern, [in]BSTR str, [out,retval] VARIANT_BOOL *p);
		HRESULT  ReadTextFile([in]BSTR filename, [defaultvalue(0)] UINT codepage, [out,retval] BSTR *pp);
		HRESULT  GetSysColor([in]UINT index, [out,retval] int *p);
		HRESULT  GetSystemMetrics([in]UINT index, [out,retval] int *p);
		HRESULT  Glob([in]BSTR pattern, [defaultvalue(16)] UINT exc_mask, [defaultvalue(-1)] UINT inc_mask, [out,retval] VARIANT *p);
		HRESULT  FileTest([in]BSTR path, [in]BSTR mode, [out,retval] VARIANT *p);
#line 595 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  GetWND([in]BSTR class_name, [out,retval] IWindow **pp);
		HRESULT  CreateWND([in]UINT window_id, [out,retval] IWindow **pp);
		HRESULT  ReleaseCapture();
		HRESULT  IsAeroEnabled([out,retval] VARIANT_BOOL *p);
		HRESULT  DecodeBase64Image([in]BSTR str, [out,retval] IGdiBitmap **pp);
		HRESULT  GetClipboardText([out,retval] BSTR *pp);
		HRESULT  SetClipboardText([in]BSTR str);
		HRESULT  PlaySound([in]BSTR path, [in]INT flag);
		HRESULT  LoadCursorX([in]BSTR path, [out,retval] INT *p);
		HRESULT  SetCursorX([in]INT id, [out,retval] INT *p);
		HRESULT  ReleaseCursorX([in]INT id);
		HRESULT  IsVistaOrGreater([out,retval] VARIANT_BOOL *p);
		HRESULT  LCMapString([in]BSTR str, [in]INT lcid, [in]INT flag, [out,retval] BSTR *pp);
		HRESULT  CreateHttpRequest([in]BSTR type, [out,retval] IHttpRequest **pp);
		HRESULT  GetWindowsVersion([out,retval] VARIANT *p);
		HRESULT  PrintPreferencePageGUID();
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(2f691b02-bd48-4dee-ad75-443b4c8ab461)
	] 
#line 631 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IWindow : IDispatch {
		[propget] HRESULT  _ptr([out] void **pp);
		[propget] HRESULT  Left([out,retval] INT *p);
		[propget] HRESULT  Top([out,retval] INT *p);
		[propget] HRESULT  Width([out,retval] INT *p);
		[propget] HRESULT  Height([out,retval] INT *p);
		[propget] HRESULT  Style([out,retval] INT *p);
		[propget] HRESULT  ExStyle([out,retval] INT *p);
		[propget] HRESULT  Caption([out,retval] BSTR *pp);
		[propput] HRESULT  Left([in]INT left);
		[propput] HRESULT  Top([in]INT top);
		[propput] HRESULT  Width([in]INT width);
		[propput] HRESULT  Height([in]INT height);
		[propput] HRESULT  Style([in]INT style);
		[propput] HRESULT  ExStyle([in]INT style);
		[propput] HRESULT  Caption([in]BSTR title);
#line 648 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  GetChild([in]BSTR class_name, [in]UINT index, [out,retval] IWindow **pp);
		HRESULT  GetAncestor([defaultvalue(1)] UINT flag, [out,retval] IWindow **pp);
		HRESULT  SetParent([in]IWindow *p);
		HRESULT  SendMsg([in]UINT msg, [in]INT wp, [in]INT lp);
		HRESULT  Show([in]UINT flag);
		HRESULT  Move([in]UINT x, [in]UINT y, [in]UINT w, [in]UINT h, [defaultvalue(0)] VARIANT_BOOL redraw);
		HRESULT  IsVisible([out,retval] VARIANT_BOOL *p);
		HRESULT  IsMinimized([out,retval] VARIANT_BOOL *p);
		HRESULT  IsMaximized([out,retval] VARIANT_BOOL *p);
		HRESULT  CreateGlass([in]UINT l, [in]UINT t, [in]UINT r, [in]UINT b, [defaultvalue(0)] UINT mode);
		HRESULT  SetWindowTransparency([in]UINT opacity, [in]int color);
		HRESULT  MsgBox([in]BSTR caption, [in]BSTR prompt, [in]UINT type, [out,retval] int *p);
		HRESULT  InputBox([defaultvalue("")] BSTR caption, [defaultvalue("")] BSTR prompt, [defaultvalue("")] BSTR defval, [defaultvalue(0)] VARIANT_BOOL only_num, [out,retval] BSTR *pp);
		HRESULT  FileDialog([defaultvalue(0)] INT mode, [defaultvalue("Open")] BSTR title, [defaultvalue("All Files|*.*")] BSTR filetype, [defaultvalue("*")] BSTR defext, [out,retval] BSTR *pp);
		HRESULT  PrintWindow([defaultvalue(-1)] VARIANT_BOOL client_only, [out,retval] IGdiBitmap **pp);
		HRESULT  ShowCaret();
		HRESULT  SetCaretPos([in]INT x, [in]INT y);
		HRESULT  HideCaret();
		HRESULT  CreateCaret([in]INT width, [in]INT height);
		HRESULT  DestroyCaret();
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(64bbf01c-92c8-407b-880e-dddd87c9abc9)
	] 
#line 678 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IPrivateFontCollection : IDispatch {
		[propget] HRESULT  FamilyCount([out,retval] INT *p);
#line 681 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  AddFont([in]BSTR path, [out,retval] INT *p);
		HRESULT  GetFont([in]BSTR name, [in]float size, [range(0, 8)] int style, [out,retval] IGdiFont **p);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(2c4e7d31-7b07-4e44-9143-7126c786fe73)
	] 
#line 692 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
	interface IHttpRequest : IDisposable {
#line 696 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface.h"
		HRESULT  AddHeader([in]BSTR line);
		HRESULT  AddPostData([in]BSTR name, [in]BSTR value);
		HRESULT  Run([in]BSTR url, [out,retval] BSTR *pp);
		HRESULT  RunAsync([in]UINT window_id, [in]BSTR url, [out,retval] UINT *p);
	};

#line 36 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
interface IFbPlayingItemLocation;
#line 41 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
interface IFbPlaybackQueueItem;
#line 71 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
interface IFbPlaylistRecyclerManager;
	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(84212840-c0c5-4625-8fc4-2cc20e4bbcc8)
	] 
#line 13 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
	interface IFbPlaylistManager : IDispatch {
#line 16 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
		HRESULT  InsertPlaylistItems([in]UINT playlistIndex, [in]UINT base, [in]IFbMetadbHandleList *handles, [defaultvalue(0)] VARIANT_BOOL select, [out,retval] UINT *outSize);
		HRESULT  InsertPlaylistItemsFilter([in]UINT playlistIndex, [in]UINT base, [in]IFbMetadbHandleList *handles, [defaultvalue(0)] VARIANT_BOOL select, [out,retval] UINT *outSize);
		HRESULT  MovePlaylistSelection([in]UINT playlistIndex, [in]int delta);
		HRESULT  RemovePlaylistSelection([in]UINT playlistIndex, [defaultvalue(0)] VARIANT_BOOL crop);
		HRESULT  GetPlaylistSelectedItems([in]UINT playlistIndex, [out,retval] IFbMetadbHandleList **outItems);
		HRESULT  GetPlaylistItems([in]UINT playlistIndex, [out,retval] IFbMetadbHandleList **outItems);
		HRESULT  SetPlaylistSelectionSingle([in]UINT playlistIndex, [in]UINT itemIndex, [in]VARIANT_BOOL state);
		HRESULT  SetPlaylistSelection([in]UINT playlistIndex, [in]VARIANT affectedItems, [in]VARIANT_BOOL state);
		HRESULT  ClearPlaylistSelection([in]UINT playlistIndex);
		HRESULT  GetPlaylistFocusItemIndex([in]UINT playlistIndex, [out,retval] INT *outPlaylistItemIndex);
		HRESULT  GetPlaylistFocusItemHandle([in]VARIANT_BOOL force, [out,retval] IFbMetadbHandle **outItem);
		HRESULT  SetPlaylistFocusItem([in]UINT playlistIndex, [in]UINT itemIndex);
		HRESULT  SetPlaylistFocusItemByHandle([in]UINT playlistIndex, [in]IFbMetadbHandle *item);
		HRESULT  GetPlaylistName([in]UINT playlistIndex, [out,retval] BSTR *outName);
		HRESULT  CreatePlaylist([in]UINT playlistIndex, [in]BSTR name, [out,retval] UINT *outPlaylistIndex);
		HRESULT  RemovePlaylist([in]UINT playlistIndex, [out,retval] VARIANT_BOOL *outSuccess);
		HRESULT  MovePlaylist([in]UINT from, [in]UINT to, [out,retval] VARIANT_BOOL *outSuccess);
		HRESULT  RenamePlaylist([in]UINT playlistIndex, [in]BSTR name, [out,retval] VARIANT_BOOL *outSuccess);
		HRESULT  DuplicatePlaylist([in]UINT from, [in]BSTR name, [out,retval] UINT *outPlaylistIndex);
		HRESULT  EnsurePlaylistItemVisible([in]UINT playlistIndex, [in]UINT itemIndex);
		HRESULT  GetPlayingItemLocation([out,retval] IFbPlayingItemLocation **outPlayingLocation);
		HRESULT  ExecutePlaylistDefaultAction([in]UINT playlistIndex, [in]UINT playlistItemIndex, [out,retval] VARIANT_BOOL *outSuccess);
		HRESULT  IsPlaylistItemSelected([in]UINT playlistIndex, [in]UINT playlistItemIndex, [out,retval] UINT *outSeleted);
		HRESULT  SetActivePlaylistContext();
#line 41 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
		HRESULT  CreatePlaybackQueueItem([out,retval] IFbPlaybackQueueItem **outPlaybackQueueItem);
		HRESULT  RemoveItemFromPlaybackQueue([in]UINT index);
		HRESULT  RemoveItemsFromPlaybackQueue([in]VARIANT affectedItems);
		HRESULT  AddPlaylistItemToPlaybackQueue([in]UINT playlistIndex, [in]UINT playlistItemIndex);
		HRESULT  AddItemToPlaybackQueue([in]IFbMetadbHandle *handle);
		HRESULT  GetPlaybackQueueCount([out,retval] UINT *outCount);
		HRESULT  GetPlaybackQueueContents([out,retval] VARIANT *outContents);
		HRESULT  FindPlaybackQueueItemIndex([in]IFbMetadbHandle *handle, [in]UINT playlistIndex, [in]UINT playlistItemIndex, [out,retval] INT *outIndex);
		HRESULT  FlushPlaybackQueue();
		HRESULT  IsPlaybackQueueActive([out,retval] VARIANT_BOOL *outIsActive);
#line 52 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
		HRESULT  SortByFormat([in]UINT playlistIndex, [in]BSTR pattern, [defaultvalue(0)] VARIANT_BOOL selOnly, [out,retval] VARIANT_BOOL *outSuccess);
		HRESULT  SortByFormatV2([in]UINT playlistIndex, [in]BSTR pattern, [defaultvalue(1)] INT direction, [out,retval] VARIANT_BOOL *outSuccess);
#line 56 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
		HRESULT  GetPlaylistAutoName([in]UINT playlistIndex, [out,retval] BSTR *name);
		HRESULT  ProcessLocationsAsync([in]VARIANT urls);
		HRESULT  IsPlaylistLocked([in]UINT playlistIndex, [out,retval] VARIANT_BOOL *outIsLocked);
		HRESULT  PlaylistLock([in]UINT playlistIndex, [in]UINT flag);
		HRESULT  PlaylistUnLock([in]UINT playlistIndex);
#line 63 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
		[propget] HRESULT  PlaybackOrder([out,retval] UINT *outOrder);
		[propput] HRESULT  PlaybackOrder([in]UINT order);
		[propget] HRESULT  ActivePlaylist([out,retval] UINT *outPlaylistIndex);
		[propput] HRESULT  ActivePlaylist([in]UINT playlistIndex);
		[propget] HRESULT  PlayingPlaylist([out,retval] UINT *outPlaylistIndex);
		[propput] HRESULT  PlayingPlaylist([in]UINT playlistIndex);
		[propget] HRESULT  PlaylistCount([out,retval] UINT *outCount);
		[propget] HRESULT  PlaylistItemCount([in]UINT playlistIndex, [out,retval] UINT *outCount);
		[propget] HRESULT  PlaylistRecyclerManager([out,retval] IFbPlaylistRecyclerManager **outRecyclerManager);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(e6d4354c-9a79-4062-b4d7-714b13539500)
	] 
#line 82 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
	interface IFbPlaybackQueueItem : IDisposable {
#line 85 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
		HRESULT  Equals([in]IFbPlaybackQueueItem *item, [out,retval] VARIANT_BOOL *outEquals);
#line 88 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
		[propget] HRESULT  _ptr([out,retval] void **pp);
		[propget] HRESULT  Handle([out,retval] IFbMetadbHandle **outHandle);
		[propput] HRESULT  Handle([in]IFbMetadbHandle *handle);
		[propget] HRESULT  PlaylistIndex([out,retval] UINT *outPlaylistIndex);
		[propput] HRESULT  PlaylistIndex([in]UINT playlistIndex);
		[propget] HRESULT  PlaylistItemIndex([out,retval] UINT *outItemIndex);
		[propput] HRESULT  PlaylistItemIndex([in]UINT itemIndex);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(0f54464f-0b86-4419-83c0-b6f612d85fb0)
	] 
#line 104 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
	interface IFbPlayingItemLocation : IDispatch {
#line 106 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
		[propget] HRESULT  IsValid([out,retval] VARIANT_BOOL *outIsValid);
		[propget] HRESULT  PlaylistIndex([out,retval] UINT *outPlaylistIndex);
		[propget] HRESULT  PlaylistItemIndex([out,retval] UINT *outPlaylistItemIndex);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(0bc36d7f-3fcb-4157-8b90-db1281423e81)
	] 
#line 118 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
	interface IFbPlaylistRecyclerManager : IDispatch {
#line 120 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
		[propget] HRESULT  Count([out,retval] UINT *outCount);
		[propget] HRESULT  Name([in]UINT index, [out,retval] BSTR *outName);
		[propget] HRESULT  Content([in]UINT index, [out,retval] IFbMetadbHandleList **outContent);
		[propget] HRESULT  Id([in]UINT index, [in]UINT *outId);
#line 125 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_playlist.h"
		HRESULT  Purge([in]VARIANT affectedItems);
		HRESULT  Restore([in]UINT index);
		HRESULT  RestoreById([in]UINT id);
		HRESULT  FindById([in]UINT id, [out,retval] UINT *outId);
	};

	[
		object,
		dual,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(4ff021ab-17bc-43de-9dbe-2d0edec1e095)
	] 
#line 12 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_tooltip.h"
	interface IFbTooltip : IDisposable {
#line 14 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_tooltip.h"
		[propget] HRESULT  Text([out,retval] BSTR *pp);
		[propput] HRESULT  Text([in]BSTR text);
		[propput] HRESULT  TrackActivate([in]VARIANT_BOOL activate);
		[propget] HRESULT  Width([out,retval] int *outWidth);
		[propput] HRESULT  Width([in]int width);
		[propget] HRESULT  Height([out,retval] int *outHeight);
		[propput] HRESULT  Height([in]int height);
		HRESULT  Activate();
		HRESULT  Deactivate();
		HRESULT  SetMaxWidth([in]int width);
		HRESULT  GetDelayTime([in]int type, [out,retval] INT *p);
		HRESULT  SetDelayTime([in]int type, [in]int time);
		HRESULT  TrackPosition([in]int x, [in]int y);
	};

	[
		dual,
		object,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(ec467423-55eb-4900-a90c-2f3ad371f0b2)
	] 
#line 12 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_datatransfer.h"
	interface IDataTransferObject : IDispatch {
#line 15 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_datatransfer.h"
		[propget] HRESULT  DropEffect([out,retval] BSTR *outDropEffect);
		[propput] HRESULT  DropEffect([in]BSTR dropEffect);
		[propget] HRESULT  EffectAllowed([out,retval] BSTR *outEffectAllowed);
		[propput] HRESULT  EffectAllowed([in]BSTR effectAllowed);
		[propget] HRESULT  Types([out,retval] VARIANT *outTypes);
#line 22 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_datatransfer.h"
		HRESULT  ClearData([defaultvalue("")] BSTR type);
		HRESULT  SetData([in]BSTR type, [in]VARIANT data);
		HRESULT  GetData([in]BSTR type, [out,retval] VARIANT *outData);
		HRESULT  SetDragImage([in]IGdiBitmap *bitmap, [in]int x, [in]int y);
	};

	[
		dual,
		object,
		pointer_default(unique),
		custom(8AFCDA7F-33B7-3120-86A8-754D2C0C0578, "library_block"),
		uuid(bf48b127-17c6-4fce-84ac-f27e59422c24)
	] 
#line 12 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_dragsource.h"
	interface IDragSourceObject : IDispatch {
#line 14 "e:\\我的文档\\source_codes\\foo_uie_wsh_panel_mod_plus_v13\\foo_uie_wsh_panel_mod_plus\\foo_uie_wsh_panel_mod\\foo_uie_wsh_panel_mod_plus\\script_interface_dragsource.h"
		HRESULT  StartDrag([in]IDataTransferObject *dataTransfer);
	};

}

